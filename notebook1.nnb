{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "function log(msg:string):void{\n    console.log(msg);\n}\nlog('hello')"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "hello",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// estoy definiendo un tipo de dato. estamos\n// optimizando un objeto tipado usando TIPOS PERSONALIZADOS:\n\n\n// creo mi tipo personalizado utilizando type...que tiene 3 propiedades\n// q es exactamente type y por que no use const como un object??\n\ntype correoType = {\n    direccion : string,\n    zipcode: string,\n    id : number,\n    temp?: number, // cuando vemos ese simbolo ?, decimos ese numero es \n    //  opcional, \n};\n\n// y que estoy haciendo aca???? \n// en que me ayuda??\n// es una forma limpia de trabajo? profe dice si\nlet correo: correoType={\n    direccion: \"Lima\",\n    zipcode: \"0443\",\n    id : 12,\n     // pero porque cuando pongo temp = 0000 no me permite ejecutar??\n};\n\n// whyyy and how\nconst darCorreoID = (data: correoType) : correoType => data.id;\n\ndarCorreoID(correo)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m12\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// estoy definiendo un tipo de dato. estamos\n// optimizando un objeto tipado usando TIPOS PERSONALIZADOS:\n\n\n// creo mi tipo personalizado utilizando type...que tiene 3 propiedades\n// q es exactamente type y por que no use const como un object??\n\ntype correoType = {\n    direccion : string,\n    zipcode: string,\n    id : number\n};\n\n// y que estoy haciendo aca???? \n// en que me ayuda??\n// es una forma limpia de trabajo? profe dice si\nlet correo: correoType={\n    direccion: \"Lima\",\n    zipcode: \"0443\",\n    id : 12\n};\n\n// whyyy and how\nconst darCorreoID = (data: correoType) : correoType => data.id;\n\ndarCorreoID(correo)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m12\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// interfaces\n// aprender bien objetos y metodos\n// no usan =\n// como escribimos una interfaz??\n// pero por que yo escogeria esto y no el tipo personalizado o un objeto\n// como se cuando deberia usar alguno?\n\ninterface correoImaginary{\n    direccion: string;\n    zipcode : string;\n    id?:number;\n}\n\n// por que props xd\n// profe dice es un paramatro\n// la interfaz se usa para tipar\n// para tipar el parametro props en la funcion otroDarCorreoID\nconst otroDarCorreoID = (props: correoImaginary):string => props.direccion;\n\nconst miCorreo: correoImaginary = {\n    direccion: \"yisus maria\",\n    zipcode: \"123\"\n};\n\nconsole.log(otroDarCorreoID(miCorreo))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "yisus maria",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// una interfaz no esta ayudando a definir\n// la estructura de un objeto\n// estamos diciendo que propiedades tiene el objeto\n// que tipos debe tener un objeto\n\n// puedo usar esta misma interfaz en multiples lugares??.. realizar ejemplo...\n// yes para eso sirve, para hacer entendible\n// y por las capacidades de ser extendidas.. realizar ejemplo\n\ninterface correoImaginary{\n    direccion: string;\n    zipcode : string;\n    id?:number;\n}\n\nconst otroDarCorreoID = (props: correoImaginary):string => props.direccion; // practicar esto pq ahi toy deficiente\n\nconst miCorreo: correoImaginary = {\n    direccion: \"yisus maria\",\n    zipcode: \"123\"\n};\n\nconsole.log(otroDarCorreoID(miCorreo))"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// datazo del profe:\n\n// ¿ como trabajamos con archivos?\n// typescript permite el uso de archivos de declaracion de tipos\n// (.d.ts)\n// podemos usar eso para definir tipos de datos personalizados \n// e interfaces pero DE MANERA UNIVERSAL\n// tecnica importante para trabajar con bibliotecas de terceros, que no estan\n// escritas en typescript.\n// y no hay ese proceso de compilacion a js.\n// eso es un truco para full stack xd\n// i dont understand this: Proporcionar tipos para bibliotecas de terceros que no están escritas en TypeScript.\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// define una interfaz\ninterface olaClima{\n    zipcode : string;\n} \n\n// define un tipo\ntype olaCLimaTipo = {\n    clima: string;\n}\n\n// Los tipos pueden crear uniones e intersecciones más fácilmente.\n// mas que las interfaces, por que? ejemplos\n// y como se usan estas cosas en general, i need big picture? \n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// tecnicas avanzadas te tipado, narrow, reduccion\n\nfunction narrowToNumber(value:unknown): number{\n    if (typeof value!== 'number') {\n        throw new Error('Value no es un numero')\n    }\n    return value;\n}\n\nconsole.log(narrowToNumber(4545345345345))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "4545345345345",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// entendamos eto:\n\nasync function getChatMessagesWithNarrowing(chatId: unknown, req: { authorization: string }) {\n    const authToken = req.authorization;\n    const numberChatId = narrowToNumber(chatId);\n    // \n    const messages = await chatService.getChatMessages(numberChatId, authToken);\n\n    if (messages !== null) {\n        messages.map((message) => {\n            console.log(`Message ID: ${message.id}, Feedback: ${message.feedback?.trim() ?? \"no feedback\"}`);\n        });\n        return {success: true, messages}\n    } else {\n        return {success: false, message: 'Chat no encontrado o acceso denegado'}\n    }\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Utiliza una función llamada narrowToNumber (que no se muestra en el código proporcionado) para convertir chatId a un número. Esto es probablemente una función de estrechamiento de tipo (type narrowing) que asegura que chatId sea un número."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Llama a un método asíncrono getChatMessages del chatService (que tampoco se muestra en el código) pasando el numberChatId y el authToken.\nEl resultado se almacena en la variable messages."
            ],
            "outputs": []
        }
    ]
}